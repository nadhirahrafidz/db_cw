{"ast":null,"code":"var _jsxFileName = \"/Users/samialalawi/Documents/UCL/year3/Databases/front end/lamp stack/src/components/Browse/Browse.js\";\nimport React, { Component } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport Form from \"react-bootstrap/Form\";\nimport Title from \"../Title\";\nimport AllMovies from \"../../Data/AllMovies\";\nimport \"../../styles/Abstract.css\";\n\nclass Browse extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: {}\n    };\n  } //make sure to make the api call before the component is rendered. Use lifecycle hook\n\n\n  componentWillMount() {} //function to make api call. For now uses dummy data\n\n\n  getData() {\n    //can use fetch() then promise chaining\n    return AllMovies;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Title, {\n      text: \"Movies database\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"introduction\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, \"Movie list\"))));\n  }\n\n}\n\nexport default Browse;","map":{"version":3,"sources":["/Users/samialalawi/Documents/UCL/year3/Databases/front end/lamp stack/src/components/Browse/Browse.js"],"names":["React","Component","ReactPlayer","Form","Title","AllMovies","Browse","constructor","props","state","movies","componentWillMount","getData","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAO,2BAAP;;AAGA,MAAMC,MAAN,SAAqBN,KAAK,CAACC,SAA3B,CAAqC;AACnCM,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,MAAM,EAAC;AAAR,KAAb;AACD,GAJkC,CAMnC;;;AACAC,EAAAA,kBAAkB,GAAI,CAErB,CATkC,CAWnC;;;AACAC,EAAAA,OAAO,GAAG;AACR;AACA,WAAOP,SAAP;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,iBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,eAQE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,CARF,CADF;AAiBD;;AAnCkC;;AA0CrC,eAAeP,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport Form from \"react-bootstrap/Form\"\n\nimport Title from \"../Title\";\nimport AllMovies from \"../../Data/AllMovies\";\nimport \"../../styles/Abstract.css\";\n\n\nclass Browse extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {movies:{}}\n  }\n\n  //make sure to make the api call before the component is rendered. Use lifecycle hook\n  componentWillMount () {\n    \n  }\n\n  //function to make api call. For now uses dummy data\n  getData (){\n    //can use fetch() then promise chaining\n    return AllMovies;\n  }\n\n  render() {\n    return (\n      <div>\n        <Title text=\"Movies database\"></Title>\n        <div className=\"search\">\n          <Form>\n\n          </Form>\n        </div>\n\n        <div className=\"Body\">\n          <div className=\"introduction\">\n            <h2>Movie list</h2>\n            \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\n\n\nexport default Browse;\n"]},"metadata":{},"sourceType":"module"}